1st Partner: Logan McDonald
2nd Partner: Veronica Salm
CMPUT 274 LBL EA2
Fall 2016

Code Filename: chat.cpp

Collaborated Code: This file was collaboratively developed by both partners, as listed above.

Much of the code from this assignment was adapted or copied from code developed in class, including the pow_mod, next_key, and wait_on_serial_3 functions (among others) and some of the code in the initiate and main functions.

Accessories:
2 * Arduino Mega Board (AMG)
2 * A-B Style USB Cable

Wiring instructions:
Arduino A is the first Arduino and Arduino B is the second Arduino. This is arbitrary and it does not actually matter which Arduino is which.
Arduino A Pin TX3 <---> Arduino B Pin RX3 
Arduino B Pin RX3  <---> Arduino A Pin TX3 
Arduino A GND  <---> Arduino B GND 

On Arduino A:
Pin 13 <---> 560 ohm GBB resistor (though any resistor is acceptable) <---> 5V

On Arduino B: 
Pin 13 <---> GND 

Running the code:
On a single PC: Open two bash terminals and use the command arduino-port-select to set the serial port of each Arduino to -ACM0 or -ACM1. On each terminal, load the file, compile and upload using make upload-0 for the first Arduino and make upload-1 for the second. Open the serial monitor for each Arduino using serial-mon-0 or serial-mon-1 respectively.
On two PCs: Use one terminal per PC. On each terminal, load the file, compile and upload using the make upload command. Open the serial monitor using serial-mon.

Problem Areas, Assumptions and General Notes: 

To solve an issue in which the client received unexpected encrypted characters from the server if the client was initiated first, we added in a char variable called "garbage" to consume those characters and prevent them from being decrypted and printed. This variable is present in two locations: first, in the client_fsm function to absorb any characters that might be present before the client moves into the waiting state, and second, in the main loop to consume any characters that might be sent before the data exchange phase begins. 

We also left some test code in the program that was initially used to test the fast_pow_mod and mul_mod functions. The test code is commented out. 

The random number is generated by reading fluctuations in the analog pin 1 on the Arduino. In generating this number, it is assumed that this fluctuation will occur randomly. This generator also takes some time to run as it must read from the pin 32 times. 

There are limitations to the function fast_pow_mod and mul_mod functions, but they are described in the function headings.

