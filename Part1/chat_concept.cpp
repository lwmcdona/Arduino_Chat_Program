/*
1st Partner: Logan McDonald
2nd Partner: Veronica Salm
CMPUT 274 LBL EA2
Fall 2016

Arduino Encrypted Chat Program:
- Arduinos exchange a common shared key used to encrypt and decrypt data.
- Public keys must be exchanged manually.
- Data exchanged between arduinos is encrypted and then decrypted once it reaches its destination.
*/

#include <Arduino.h>

/*Generates a 16 bit random number to be used as the secret key.*/
uint16_t random_number() {
    const int random_number_pin = 1; // The analog pin to be read from
    int reading;
    uint16_t number = 0;
    for (int i=0; i<16; ++i) { // reads 16 bits
        number = number << 1; // shifts the number to the left to free up the last bit
        reading = (analogRead(random_number_pin)) & 1; // reads from the pin and converts it to a single bit (1 or 0)
        number = number | reading; // replaces the last bit of number with the value of the reading
        delay(50); // allow the reading to fluctuate
    }
    return number;
}

/*Calculates and returns (a**b) mod m
Parameters:
a: base, nonnegative integer
b: exponent, nonnegative integer, a=b=0 not allowed
m: 0 or positive integer m<2^16
Running time grows linearly with b.
*/
uint32_t fast_pow_mod(uint32_t a, uint32_t b, uint32_t m) { //the fast function developed in class on 09-28-16
    uint32_t result = 1 % m;
    uint32_t p = a % m;
    for (int i = 0; i < 32; ++i) {
        if ( (b & (1ul<<i)) !=0 ) { //1ul converts 1 to an unsigned long
            result = (result*p) % m;
        }
        p = (p*p) % m;
    }
    return result;
}

/*Gets input from the user, in this case, the input is the partner's public key.*/
void partnerKeyPrompt(char line[100]) {
    int counter = 0;
    int incomingByte;
    while (1) {
        while (Serial.available() == 0) {
        }
        incomingByte = Serial.read(); // take a byte of input from the user and store it
        if (incomingByte == 13) { // the user must press enter in order to exit the loop and input the public key
            Serial.println("");
            line[counter] = 0;
            break;
        }
        // store the byte of input in the array
        else {
            line [counter] = incomingByte;
            // print what the user typed
            Serial.print(line[counter]);
        }
        ++counter; // update the counter
    }
}

/*Key exchange*/
uint32_t initiate() {
    char line[100] = {0};

    uint32_t prime = 19211; //prime and generator from assignment
    uint32_t generator = 6;
    uint32_t private_key = random_number(); // generates a random number

    uint32_t public_key = fast_pow_mod(generator, private_key, prime); //generates a public key based on the user's private key

    //key exchange
    Serial.print("Hello, here is your public key: ");
    Serial.println(public_key);
    Serial.print("Can you please enter your partner's public key?: ");

    partnerKeyPrompt(line); //the user should manually enter the public key generated by the other arduino
    uint16_t partners_public_key = atol(line);

    // generate the shared secret key
    uint32_t shared_secret = fast_pow_mod(partners_public_key, private_key, prime);

    return shared_secret;
}

int main() {
    init();
    Serial.begin(9600);
    Serial3.begin(9600);

    uint32_t shared_secret = initiate(); //exchanges keys between arduinos
    uint8_t secret_key = shared_secret % 256; // convert to an 8 bit key

    Serial.println("You may now type the characters you wish to send on the encrypted channel: ");

    while (true) { //sends and recieves data character by character
        if (Serial.available() > 0) {
            char c = Serial.read();
            Serial.write(c); //echo back to screen
            c = c ^ secret_key; // encrypt data
            Serial3.write(c); //sending byte to the "other" Arduino
        }
        if (Serial3.available() > 0) {
            char c = Serial3.read();
            c = c ^ secret_key; //decrypt data
            Serial.print(c); //print byte from other arduino
        }
    }
    Serial3.end();
    Serial.end();
    return 0;
}
