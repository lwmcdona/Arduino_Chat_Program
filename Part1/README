1st Partner: Logan McDonald
2nd Partner: Veronica Salm
CMPUT 274 LBL EA2
Fall 2016

Code Filename: chat.cpp

Collaborated Code: This file was collaboratively developed by both partners, as listed above.

Much of the code from this assignment was adapted or copied from code developed in class, including the pow_mod function and much of the code in the initiate and main functions.

Accessories:
2 * Arduino Mega Board (AMG)
2 * A-B Style USB Cable

Wiring instructions:
Arduino A is the first Arduino (belonging to the user), and Arduino B is the second Arduino (belonging to the user’s partner).
Arduino A Pin TX3 <---> Arduino B Pin RX3 
Arduino B Pin RX3  <---> Arduino A Pin TX3 
Arduino A GND  <---> Arduino B GND 

Running the code:
On a single PC: Open two bash terminals and use the command arduino-port-select to set the serial port of each Arduino to -ACM0 or -ACM1. On each terminal, load the file, compile and upload using make upload-0 for the first Arduino and make upload-1 for the second. Open the serial monitor for each Arduino using serial-mon-0 or serial-mon-1 respectively.
On two PCs: Use one terminal per PC. On each terminal, load the file, compile and upload using the make upload command. Open the serial monitor using serial-mon.

Problem Areas, Assumptions and General Notes: 

The partners must exchange their public keys manually. This is done by copying the public key displayed on the serial monitor of the PC connected to Arduino B (the arduino belonging to the user’s partner) into the serial monitor of the PC connected to Arduino A (the user’s Arduino). The user must press enter to input the public key.

The program assumes that the user enters the partner's public key correctly. If the user enters the public key incorrectly, the secret key will be different for each partner and the messages will not be decrypted correctly, resulting in messages consisting of nonsense. If this happens, the user will need to restart the program and try again. 
 
The shared secret key is converted to 8 bits using the mod operator. This may render the program somewhat insecure.

The random number is generated by reading fluctuations in the analog pin 1 on the Arduino. In generating this number, it is assumed that this fluctuation will occur randomly.

There are limitations to the function fast_pow_mod but they are described in the function heading.

